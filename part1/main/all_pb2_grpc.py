# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import all_pb2 as all__pb2


class AllServicesStub(object):
    """define buyer services
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterBuyer = channel.unary_unary(
                '/sss.AllServices/RegisterBuyer',
                request_serializer=all__pb2.RegisterBuyerRequest.SerializeToString,
                response_deserializer=all__pb2.RegisterBuyerResponse.FromString,
                )
        self.SearchItem = channel.unary_unary(
                '/sss.AllServices/SearchItem',
                request_serializer=all__pb2.SearchItemRequest.SerializeToString,
                response_deserializer=all__pb2.SearchItemResponse.FromString,
                )
        self.BuyItem = channel.unary_unary(
                '/sss.AllServices/BuyItem',
                request_serializer=all__pb2.BuyItemRequest.SerializeToString,
                response_deserializer=all__pb2.BuyItemResponse.FromString,
                )
        self.AddToWishList = channel.unary_unary(
                '/sss.AllServices/AddToWishList',
                request_serializer=all__pb2.AddToWishListRequest.SerializeToString,
                response_deserializer=all__pb2.AddToWishListResponse.FromString,
                )
        self.RateItem = channel.unary_unary(
                '/sss.AllServices/RateItem',
                request_serializer=all__pb2.RateItemRequest.SerializeToString,
                response_deserializer=all__pb2.RateItemResponse.FromString,
                )
        self.RegisterSeller = channel.unary_unary(
                '/sss.AllServices/RegisterSeller',
                request_serializer=all__pb2.RegisterSellerRequest.SerializeToString,
                response_deserializer=all__pb2.RegisterSellerResponse.FromString,
                )
        self.SellItem = channel.unary_unary(
                '/sss.AllServices/SellItem',
                request_serializer=all__pb2.SellItemRequest.SerializeToString,
                response_deserializer=all__pb2.SellItemResponse.FromString,
                )
        self.UpdateItem = channel.unary_unary(
                '/sss.AllServices/UpdateItem',
                request_serializer=all__pb2.UpdateItemRequest.SerializeToString,
                response_deserializer=all__pb2.UpdateItemResponse.FromString,
                )
        self.DeleteItem = channel.unary_unary(
                '/sss.AllServices/DeleteItem',
                request_serializer=all__pb2.DeleteItemRequest.SerializeToString,
                response_deserializer=all__pb2.DeleteItemResponse.FromString,
                )
        self.DisplaySellerItems = channel.unary_unary(
                '/sss.AllServices/DisplaySellerItems',
                request_serializer=all__pb2.DisplaySellerItemsRequest.SerializeToString,
                response_deserializer=all__pb2.DisplaySellerItemsResponse.FromString,
                )
        self.NotifyClient = channel.unary_unary(
                '/sss.AllServices/NotifyClient',
                request_serializer=all__pb2.Notification.SerializeToString,
                response_deserializer=all__pb2.NotificationResponse.FromString,
                )


class AllServicesServicer(object):
    """define buyer services
    """

    def RegisterBuyer(self, request, context):
        """register buyer
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SearchItem(self, request, context):
        """search item
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BuyItem(self, request, context):
        """buy item
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddToWishList(self, request, context):
        """add to wish list
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RateItem(self, request, context):
        """rate item
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterSeller(self, request, context):
        """register seller
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SellItem(self, request, context):
        """sell item
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateItem(self, request, context):
        """update item
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteItem(self, request, context):
        """delete item
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DisplaySellerItems(self, request, context):
        """display items
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NotifyClient(self, request, context):
        """notify client
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AllServicesServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterBuyer': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterBuyer,
                    request_deserializer=all__pb2.RegisterBuyerRequest.FromString,
                    response_serializer=all__pb2.RegisterBuyerResponse.SerializeToString,
            ),
            'SearchItem': grpc.unary_unary_rpc_method_handler(
                    servicer.SearchItem,
                    request_deserializer=all__pb2.SearchItemRequest.FromString,
                    response_serializer=all__pb2.SearchItemResponse.SerializeToString,
            ),
            'BuyItem': grpc.unary_unary_rpc_method_handler(
                    servicer.BuyItem,
                    request_deserializer=all__pb2.BuyItemRequest.FromString,
                    response_serializer=all__pb2.BuyItemResponse.SerializeToString,
            ),
            'AddToWishList': grpc.unary_unary_rpc_method_handler(
                    servicer.AddToWishList,
                    request_deserializer=all__pb2.AddToWishListRequest.FromString,
                    response_serializer=all__pb2.AddToWishListResponse.SerializeToString,
            ),
            'RateItem': grpc.unary_unary_rpc_method_handler(
                    servicer.RateItem,
                    request_deserializer=all__pb2.RateItemRequest.FromString,
                    response_serializer=all__pb2.RateItemResponse.SerializeToString,
            ),
            'RegisterSeller': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterSeller,
                    request_deserializer=all__pb2.RegisterSellerRequest.FromString,
                    response_serializer=all__pb2.RegisterSellerResponse.SerializeToString,
            ),
            'SellItem': grpc.unary_unary_rpc_method_handler(
                    servicer.SellItem,
                    request_deserializer=all__pb2.SellItemRequest.FromString,
                    response_serializer=all__pb2.SellItemResponse.SerializeToString,
            ),
            'UpdateItem': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateItem,
                    request_deserializer=all__pb2.UpdateItemRequest.FromString,
                    response_serializer=all__pb2.UpdateItemResponse.SerializeToString,
            ),
            'DeleteItem': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteItem,
                    request_deserializer=all__pb2.DeleteItemRequest.FromString,
                    response_serializer=all__pb2.DeleteItemResponse.SerializeToString,
            ),
            'DisplaySellerItems': grpc.unary_unary_rpc_method_handler(
                    servicer.DisplaySellerItems,
                    request_deserializer=all__pb2.DisplaySellerItemsRequest.FromString,
                    response_serializer=all__pb2.DisplaySellerItemsResponse.SerializeToString,
            ),
            'NotifyClient': grpc.unary_unary_rpc_method_handler(
                    servicer.NotifyClient,
                    request_deserializer=all__pb2.Notification.FromString,
                    response_serializer=all__pb2.NotificationResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'sss.AllServices', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AllServices(object):
    """define buyer services
    """

    @staticmethod
    def RegisterBuyer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sss.AllServices/RegisterBuyer',
            all__pb2.RegisterBuyerRequest.SerializeToString,
            all__pb2.RegisterBuyerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SearchItem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sss.AllServices/SearchItem',
            all__pb2.SearchItemRequest.SerializeToString,
            all__pb2.SearchItemResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BuyItem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sss.AllServices/BuyItem',
            all__pb2.BuyItemRequest.SerializeToString,
            all__pb2.BuyItemResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddToWishList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sss.AllServices/AddToWishList',
            all__pb2.AddToWishListRequest.SerializeToString,
            all__pb2.AddToWishListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RateItem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sss.AllServices/RateItem',
            all__pb2.RateItemRequest.SerializeToString,
            all__pb2.RateItemResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RegisterSeller(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sss.AllServices/RegisterSeller',
            all__pb2.RegisterSellerRequest.SerializeToString,
            all__pb2.RegisterSellerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SellItem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sss.AllServices/SellItem',
            all__pb2.SellItemRequest.SerializeToString,
            all__pb2.SellItemResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateItem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sss.AllServices/UpdateItem',
            all__pb2.UpdateItemRequest.SerializeToString,
            all__pb2.UpdateItemResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteItem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sss.AllServices/DeleteItem',
            all__pb2.DeleteItemRequest.SerializeToString,
            all__pb2.DeleteItemResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DisplaySellerItems(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sss.AllServices/DisplaySellerItems',
            all__pb2.DisplaySellerItemsRequest.SerializeToString,
            all__pb2.DisplaySellerItemsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NotifyClient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sss.AllServices/NotifyClient',
            all__pb2.Notification.SerializeToString,
            all__pb2.NotificationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
